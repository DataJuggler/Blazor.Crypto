@page "/PasswordHash"
@using DataJuggler.Core.Cryptography
@using DataJuggler.UltimateHelper.Core
@using Blazor.Crypto

<h1 class="pagetitle">Password Hash Sample</h1>

<div class="nuget">
    Install Package: DataJuggler.Core.Cryptography *<br />
    * This package uses Dot Net Core 3.1

    <div class="fineprint">
        For .Net Framework: Use Nuget package DataJuggler.Core.UltimateHelper.<br />
        CryptographyHelper is included in this package with the same functionality.
    </div>
</div>

@*if the message exists*@
@if (TextHelper.Exists(message))
{
    <div class="messagestyle">
        @message
    </div>
}

<div class="lefthalf">
    <div>
        Password<br />
        <textarea class="textinput" @bind="password"></textarea>
    </div>
    <div>
        Key Code<br />
        <input class="textinput" type="text" @bind="keyCode" />
    </div>
    <div>
        <button class="buttonwide" @onclick="Generate">Generate</button>
        @if (TextHelper.Exists(passwordHash))
        {
            <button class="buttonwide moveleft16" @onclick="Verify">Verify</button>
        }
    </div>
    <div>
        Password Hash<br />
        <textarea class="results" @bind="passwordHash"></textarea>

        @if (verificationStarted)
        {
            <div class="@statusImageCSS"></div>
        }
    </div>
</div>

<div class="righthalf">

</div>

@code{
    // locals
    string password = "";
    string passwordHash = "";
    bool verified = false;
    bool verificationStarted = false;
    string keyCode = CryptographyHelper.DefaultPassword;
    string message = "";
    string statusImageCSS = "";

    /// <summary>
    /// This method generates the passwordhash.
    /// </summary>
    private void Generate()
    {
        // remove any verificaitons
        verificationStarted = false;
        verified = false;

        // If the textToEncrypt and keyCode strings exist
        if (TextHelper.Exists(password, keyCode))
        {
             // clear any messages
            message = "";

            // get the encryptedText
            passwordHash = CryptographyHelper.GeneratePasswordHash(password, keyCode);
        }
        else if (!TextHelper.Exists(password))
        {
            // set the message
            message = "You must enter the password to generate a hash for.";
        }
        else if (!TextHelper.Exists(keyCode))
        {
            // set the message
            message = "You must enter a KeyCode.";
        }
    }

    /// <summary>
    /// This method generates the passwordhash.
    /// </summary>
    private void Verify()
    {
        // set to true
        verificationStarted = true;

        // If the textToEncrypt and keyCode strings exist
        if (TextHelper.Exists(password, keyCode, passwordHash))
        {
            // get the encryptedText
            verified = CryptographyHelper.VerifyHash(password, keyCode, passwordHash);

            // if verified
            if (verified)
            {
                // set the css class
                statusImageCSS = "success";
            }
            else
            {
                statusImageCSS = "failure";
            }
        }
        else if (!TextHelper.Exists(passwordHash))
        {
            // set the message
            message = "You must enter the Password Hash to verify a password hash.";
        }
        else if (!TextHelper.Exists(password))
        {
            // set the message
            message = "You must enter the password to verify a password hash.";
        }
        else if (!TextHelper.Exists(keyCode))
        {
            // set the message
            message = "You must enter a KeyCode.";
        }

        // force refresh
        StateHasChanged();
    }

}